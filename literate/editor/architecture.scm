;; Note: this file was generated from the ~grasp.org~
;; document, which also serves as the project's documentation.
;; 
;; Please do not edit this file directly, as all the changes
;; will be overwritten after code regeneration, and modify
;; the ~grasp.org~ file instead.

(module-name (editor architecture))
(import (language extensions))

(define-interface Interactive ()
  ;; by convention, the function that reacted to the input
  ;; ought to return #true
  (tap! finger::byte #;at x::real y::real)::boolean
  (press! finger::byte #;at x::real y::real)::boolean
  (second-press! finger::byte #;at x::real y::real)::boolean
  (double-tap! finger::byte x::real y::real)::boolean
  (long-press! finger::byte x::real y::real)::boolean
  (key-typed! key-code::long)::boolean)

(define-interface Drag ()
  (move! x::real y::real dx::real dy::real)::void
  (drop! x::real y::real vx::real vy::real)::void)

(define-object (NoDrop)::Drag
  (define (move! x::real y::real dx::real dy::real)::void
    #!abstract)

  (define (drop! x::real y::real vx::real vy::real)::void
    (values)))

(define-interface Visual ()
  (render! active? ::boolean)::void)

(define-interface Tile ()
  (width)::real
  (height)::real)

(define-interface ResizableTile (Tile)
  (min-width)::real
  (min-height)::real
  (set-size! new-width::real new-height::real anchor::(maybe Object))::void)

(define-interface Application (Interactive Visual ResizableTile))

(define-object (Passive)::Interactive
  (define (tap! finger::byte #;at x::real y::real)::boolean #false)
  (define (press! finger::byte #;at x::real y::real)::boolean #false)
  (define (second-press! finger::byte #;at x::real y::real)::boolean #false)
  (define (double-tap! finger::byte x::real y::real)::boolean #false)
  (define (long-press! finger::byte x::real y::real)::boolean #false)
  (define (key-typed! key-code::long)::boolean #false))

(define-object (NullApplication)::Application
  (define (render! active? ::boolean)::void (values))
  (define-private internal-width ::real 1)
  (define-private internal-height ::real 1)

  (define (width)::real internal-width)
  (define (height)::real internal-height)
  (define (min-width)::real 1)
  (define (min-height)::real 1)
  (define (set-size! new-width::real new-height::real 
                     anchor::(maybe Object))
    ::void
    (set! internal-width (max (min-width) new-width))
    (set! internal-height (max (min-height) new-height)))

  (Passive))

(define-object (Main application ::Application)::Application

  (define (set-application! new-application ::Application)
    (set! application new-application))

  (delegate (render! active? ::boolean)::void application)

  (delegate (width)::real application)

  (delegate (height)::real application)

  (delegate (min-width)::real application)

  (delegate (min-height)::real application)

  (delegate (set-size! new-width::real new-height::real 
                       anchor::(maybe Object))
    ::void
    application)

  (define dragging ::(maps (byte) to: Drag)
    (mapping (finger::byte)::Drag #!null))

  (define (drag! finger::byte action::Drag)::void
    (set! (dragging finger) action))

  (define (undrag! finger::byte)::void
    (unset! (dragging finger)))

  (delegate (tap! finger::byte #;at x::real y::real)::boolean application)

  (delegate (press! finger::byte #;at x::real y::real)::boolean application)

  (define (release! finger::byte x::real y::real
		    vx::real vy::real)
    ::boolean
    (and-let* ((drag ::Drag (dragging finger)))
      (drag:drop! x y vx vy)
      (unset! (dragging finger))
      #t))

  (define (move! finger::byte x::real y::real dx::real dy::real)
    ::boolean
    (and-let* ((drag ::Drag (dragging finger)))
      (drag:move! x y dx dy)
      #t))

  (delegate (second-press! finger::byte #;at x::real y::real)::boolean application)

  (delegate (double-tap! finger::byte x::real y::real)::boolean application)

  (delegate (long-press! finger::byte x::real y::real)::boolean application)

  (delegate (key-typed! key-code::long)::boolean application))

(define-early-constant main ::Main (Main (NullApplication)))

(define-interface Animation ()
  ;; if this method returns #f, it means
  ;; that the animation has ended and can be
  ;; discarded by the animation system
  (advance! timestep/ms::uint)::boolean)

(define-interface Cancellable ()
  (cancel)::Cancellable)

(define-object (CancellableNothing)::Cancellable
  (define (cancel)::Cancellable
    (this)))

(define-early-constant cancellable-nothing ::Cancellable
  (CancellableNothing))

(define-interface Postponed ()
  (after delay-ms::long action::procedure)::Cancellable)

(define-type (Position left: real top: real))

(define-early-constant last-known-pointer-position
  ;; here we initialize 10 values, because Android can support
  ;; up to 10 pointers. That they'll be unused with other clients?
  ;; We don't care! 
  ((array-of Position)
   (Position left: 0 top: 0)
   (Position left: 0 top: 0)
   (Position left: 0 top: 0)
   (Position left: 0 top: 0)
   (Position left: 0 top: 0)
   (Position left: 0 top: 0)
   (Position left: 0 top: 0)
   (Position left: 0 top: 0)
   (Position left: 0 top: 0)
   (Position left: 0 top: 0)))

(define-object (TouchEventProcessor finger::byte
				    target::Main
				    run::Postponed)
  
  (define (distance x1::real y1::real x2::real y2::real)::real
    (hypotenuse (- x2 x1) (- y2 y1)))

  (define last-known-position ::Position
    (last-known-pointer-position finger))
  
  (define x0 ::real +nan.0)
  (define y0 ::real +nan.0)

  (define vx ::float 0.0)
  (define vy ::float 0.0)

  (define dx ::real +nan.0)
  (define dy ::real +nan.0)
  
  (define vicinity ::real 1.0)
  
  (define suppressed-presses ::byte 0)
  
  (define press-time-ms ::real -inf.0)
  
  (define release-time-ms ::real -inf.0)

  (define move-time-ms ::real -inf.0)

  (define long-press-time-ms ::real 700)

  (define double-tap-timeout-ms ::real 350)
  
  (define timeout ::Cancellable cancellable-nothing)

  (define (move! x::real y::real time-ms::real)::boolean
    (cond
     ((zero? suppressed-presses)
      (set! timeout (timeout:cancel))
      (let ((delta-ms ::real (- time-ms move-time-ms)))
	(set! dx (- x last-known-position:left))
	(set! dy (- y last-known-position:top))
	(set! vx (/ dx delta-ms))
	(set! vy (/ dy delta-ms))
	(set! last-known-position:left x)
	(set! last-known-position:top y)
	(set! move-time-ms time-ms)
	(target:move! finger x y dx dy)))
     
     ((is (distance x0 y0 x y) > vicinity)
      (set! timeout (timeout:cancel))
      (let ((suppressed ::int suppressed-presses))
	(set! suppressed-presses 0)
	(begin/or
	 (if (is suppressed >= 2)
	     (target:second-press! finger x0 y0)
	     (target:press! finger x0 y0))
	 (target:move! finger x0 y0 0 0)
	 (target:move! finger x y (- x x0) (- y y0)))))
     
     (else
      #f)))

  (define (press! x::real y::real time-ms::real)::boolean
    (set! timeout (timeout:cancel))
    (set! last-known-position:left x)
    (set! last-known-position:top y)
    (set! vx 0)
    (set! vy 0)
    (set! press-time-ms time-ms)
    (set! move-time-ms time-ms)

    (match suppressed-presses
      (0 (set! suppressed-presses 1)
	 (set! x0 x)
	 (set! y0 y)
	 (set! timeout
	       (run:after
		long-press-time-ms
		(lambda ()
		  (set! suppressed-presses 0)
		  (target:long-press! finger x0 y0))))
	 #f)
      (1 (cond
	  ((is (distance x0 y0 x y) <= vicinity)
	   (set! suppressed-presses 2)
	   #f)
	  (else
	   (let ((x0- x0)
		 (y0- y0))
	     (set! x0 x)
	     (set! y0 y)
	     (target:tap! finger x0- y0-)))))))

  (define (release! x::real y::real time-ms::real)::boolean
    (set! timeout (timeout:cancel))
    (match suppressed-presses
      (0 (target:release! finger x y vx vy))
      (1 (set! timeout
	       (run:after
		double-tap-timeout-ms
		(lambda ()
		  (set! suppressed-presses 0)
		  (target:tap! finger x0 y0))))
	 #f)
      (2 (set! suppressed-presses 0)
	 (target:double-tap! finger x y))))

  #;(assert (is finger < (length last-known-pointer-position)))
  )

;; Android, Desktop and Terminal/Text use different
;; representations of font. For this reason, we need
;; to coerce it to Object in the interface.
;;
;; The FontProxy object is meant to encode not only
;; the type face, but also its size.
(define-alias FontProxy java.lang.Object)

;; we are going to represent colors as 32-bit numbers
;; using the #xRRGGBBAA format, meaning that the most
;; significant byte is Red, and the least byte significant
;; - Alpha (transparency). So for example 0 is completely
;; trasparent "black", #x000000FF is opaque black,
;; and #xFFFFFFFF is opaque white.
;; 
(define-alias RGBA uint)

(define-type (Extent width: real height: real))

(define-enum LineDecoration (Thick Dashed))

(define-alias LineStyle (EnumSetOf LineDecoration))

(define-interface Painter ()

  (with-translation left ::real top ::real action ::(maps () to: ,a))::,a
  (with-rotation angle/radians ::real action ::(maps () to: ,a))::,a
  (with-clip width ::real height ::real action ::(maps () to: ,a))::,a
  (with-scale scale ::real action ::(maps () to: ,a))::,a
  (with-stretch rightward ::real downward ::real action ::(maps () to: ,a))::,a
  (with-intensity fraction ::real action ::(maps () to: ,a))::,a

  (play! animation::Animation)::void
  (playing? animation::Animation)::boolean
  (stop-playing! animation::Animation)::void

  (set-lead-color! color ::RGBA)::RGBA
  (current-lead-color)::RGBA

  (set-fill-color! color ::RGBA)::RGBA
  (current-fill-color)::RGBA

  (set-font! font ::FontProxy)::FontProxy
  (current-font)::FontProxy
  (draw-text! text ::java.lang.CharSequence)::Extent

  (set-line-style! style ::LineStyle)::LineStyle
  (current-line-style)::LineStyle
  (draw-line! x0 ::real y0 ::real x1 ::real y1 ::real)::void
  (draw-line-rightward! width ::real)::void
  (draw-line-downward! height ::real)::void

  (draw-rounded-rectangle! width ::real height ::real)::void
  (draw-rectangle! width ::real height ::real)::void

  )

(define-interface KeyboardNavigable ()
  ;; likewise, the above functions should return #true
  ;; only if the cursor has actually been moved
  (move-cursor-left!)::boolean
  (move-cursor-right!)::boolean
  (move-cursor-up!)::boolean
  (move-cursor-down!)::boolean)

(define-interface Undoable ()
  (undo!)::boolean
  (redo!)::boolean)

#|
(define-interface Selectable ()
  (expand-selection-left!)::boolean
  (expand-selection-right!)::boolean
  (expand-selection-up!)::boolean
  (expand-selection-down!)::boolean)
|#
