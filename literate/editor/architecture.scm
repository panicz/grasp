;; Note: this file was generated from the ~grasp.org~
;; document, which also serves as the project's documentation.
;; 
;; Please do not edit this file directly, as all the changes
;; will be overwritten after code regeneration.

(module-name (editor architecture))
(import (language extensions))

(define-interface Interactive ()
  ;; by convention, the function that reacted to the input
  ;; ought to return #true
  (tap! finger::byte #;at x::real y::real)::boolean
  (press! finger::byte #;at x::real y::real)::boolean
  (second-press! finger::byte #;at x::real y::real)::boolean
  (double-tap! finger::byte x::real y::real)::boolean
  (long-press! finger::byte x::real y::real)::boolean
  (key-typed! key-code::long)::boolean)

(define-interface Drag ()
  (move! x::real y::real dx::real dy::real)::void
  (drop! x::real y::real vx::real vy::real)::void)

(define-interface Visual ()
  (render! active? ::boolean)::void)

(define-interface Tile ()
  (width)::real
  (height)::real)

(define-interface ResizableTile (Tile)
  (min-width)::real
  (min-height)::real
  (set-size! new-width::real new-height::real anchor::(maybe Object))::void)

(define-interface Application (Interactive Visual ResizableTile))

(define-object (Passive)::Interactive
  (define (tap! finger::byte #;at x::real y::real)::boolean #false)
  (define (press! finger::byte #;at x::real y::real)::boolean #false)
  (define (second-press! finger::byte #;at x::real y::real)::boolean #false)
  (define (double-tap! finger::byte x::real y::real)::boolean #false)
  (define (long-press! finger::byte x::real y::real)::boolean #false)
  (define (key-typed! key-code::long)::boolean #false))

(define-object (NullApplication)::Application
  (define (render! active? ::boolean)::void (values))
  (define-private internal-width ::real 1)
  (define-private internal-height ::real 1)

  (define (width)::real internal-width)
  (define (height)::real internal-height)
  (define (min-width)::real 1)
  (define (min-height)::real 1)
  (define (set-size! new-width::real new-height::real 
                     anchor::(maybe Object))
    ::void
    (set! internal-width (max (min-width) new-width))
    (set! internal-height (max (min-height) new-height)))

  (Passive))

(define-object (Main application ::Application)::Application

  (define (set-application! new-application ::Application)
    (set! application new-application))

  (delegate (render! active? ::boolean)::void application)

  (delegate (width)::real application)

  (delegate (height)::real application)

  (delegate (min-width)::real application)

  (delegate (min-height)::real application)

  (delegate (set-size! new-width::real new-height::real 
                       anchor::(maybe Object))
    ::void
    application)

  (define dragging ::(maps (byte) to: Drag)
    (mapping (finger::byte)::Drag #!null))

  (define (drag! finger::byte action::Drag)::void
    (set! (dragging finger) action))

  (define (undrag! finger::byte)::void
    (unset! (dragging finger)))

  (delegate (tap! finger::byte #;at x::real y::real)::boolean application)

  (delegate (press! finger::byte #;at x::real y::real)::boolean application)

  (define (release! finger::byte x::real y::real
		    vx::real vy::real)
    ::boolean
    (and-let* ((drag ::Drag (dragging finger)))
      (drag:drop! x y vx vy)
      (unset! (dragging finger))
      #t))

  (define (move! finger::byte x::real y::real dx::real dy::real)
    ::boolean
    (and-let* ((drag ::Drag (dragging finger)))
      (drag:move! x y dx dy)
      #t))

  (delegate (second-press! finger::byte #;at x::real y::real)::boolean application)

  (delegate (double-tap! finger::byte x::real y::real)::boolean application)

  (delegate (long-press! finger::byte x::real y::real)::boolean application)

  (delegate (key-typed! key-code::long)::boolean application))

(define-early-constant main ::Main (Main (NullApplication)))

(define-interface KeyboardNavigable ()
  ;; likewise, the above functions should return #true
  ;; only if the cursor has actually been moved
  (move-cursor-left!)::boolean
  (move-cursor-right!)::boolean
  (move-cursor-up!)::boolean
  (move-cursor-down!)::boolean)

(define-interface Undoable ()
  (undo!)::boolean
  (redo!)::boolean)

#|
(define-interface Selectable ()
  (expand-selection-left!)::boolean
  (expand-selection-right!)::boolean
  (expand-selection-up!)::boolean
  (expand-selection-down!)::boolean)
|#
