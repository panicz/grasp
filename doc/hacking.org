* GRASP HACKING GUIDE

GRASP is an interactive medium and an editor. At the moment
of writing, it is avaliable as an Android application,
a stand-alone graphiical application (using Java's AWT framework)
and a terminal (using the Lanterna framework for Java).

GRASP itself is written in the Kawa Scheme programming language,
which is a dialect of Scheme that runs on the JVM and provides
a Java-like type system (including objects, classes, interfaces
and checked type annotations).

Like every self-respecting Lisp program, GRASP provides tons
of extensions to Kawa Scheme, implemented in the form of macros.
Some of those macros will be covered by this document, but
with others you'll be left on your own.

This document assumes some basic familiarity with the Scheme
programming language and with Java-style object orientation.

** Caveat Emptor

At the moment of writing, GRASP still requires a bit of love
to become an actually usable application. However, we believe
that some of its current qualities can already be valuable
to some hackers -- which is why we wrote this guide.

GRASP comes bundled with a set of dependencies (except for
the JVM runtime). They are included in the =libs/= directory.
Among them there's =android.jar= which I've found in my
distribution of Termux, there's =kawa.jar= that I have built
myself from Kawa sources (pointing to the included =android.jar=),
as well as =androidsvg-1.4.jar=, =lanterna-3.1.1.jar=
and =jsvg-1.0.0.jar= that I think I downloaded from Maven Central.

None of them was built by me from the source, and I never
audited them for any security issues, so I cannot attest
that they don't do anything malicious (even though I never
had any reason to suspect that they do).

There are also two =.dex= files: =kawa.dex= and =androidsvg-1.4.dex=,
which simply are "pre-dexed" versions of the corresponding .jar
files (using the d8 tool provided by the Androud SDK). They are
provided in order to reduce build times of the Android client.

Note also, that this document was written around the commit
=efb205244adbdfef43610b8325446d92c29f9421= (October 2023), and
some modules could have been moved or refactored.

I will try to update this guide occasionally, but keeping
it in sync with the code base is not my top priority. Of course,
if you spot any inconsistencies, feel encoraged to send me
your patches.

** Extending GRASP

GRASP is designed to be -- first and foremost -- extensible.
There's a few ways to extend GRASP. The most brutal one is to
outright modify its source code. In some cases this might be legitimate,
but it's usually better to use one of the extension mechanisms
provided by GRASP.

*** The Configuration File

During the startup, GRASP executes the file =assets/init.scm=.
This might be the first place worth editing if you want to tweak
GRASP's behavior (if GRASP is bundled in a =.jar= archive, it can
be accessed by simply unzipping the archive. I suppose that
a similar thing can be done with Android's =.apk= files).

The file is mainly responsible for setting the initial keyboard
bindings during the startup, but it can execute arbitrary Scheme code.

*** The Ontology of GRASP

At its core, GRASP is an editor of Lisp's s-expressions, which
means that cons cells and atoms are the basic building blocks
of documents/programs written in GRASP. They are implemented
in the =(editor types primitive)= module (note that
this module corresponds to the file =src/editor/types/primitive.scm=
inside GRASP's repository; the remaining modules are mapped to
the file system in the exact same way).

But in addition to those two types, there are a few other
built-in types in GRASP, namely:
- text, which corresponds to strings -- see =(editor types texts)=
- spaces, which represent whitespace between elements, as defined
  in the module =(editor types spaces)=
- comments, that can be included inside spaces
  =(editor types comments)=.
  There are three types of comments: line comments, block comments
  and expression comments, which correspond to the same types
  of comments in the Scheme programming language.

Another important family of expressions are extensions, which
are objects that implement the Enchanted interface, as defined
in the =(editor types extensions extensions)= module.
Extensions are meant to be user-definable, but GRASP already
comes with a bunch of built-in extensions. The simplest ones are
quotations, as defined in the
=(editor types extensions quotations)= module, and they
simply provide special markers for quoted, quasiquoted and
unquoted expressions.

A more elaborate extension is the visual stepper. Its definition can
be found in the =(editor types extensions visual-stepper)=
module.

Some simple extensions can also be found in the
=(editor types extensions widgets)= module. It contains
a definition of classes such as =Button=, which -- in addition to
being embeddable inside GRASP documents -- are also used for building
the interface of GRASP.

Moreover, there exists a distinct class of extensions that is used
for combining other extensions (e.g. putting them beside one another).
Those can be found in the =(editor types extensions combinators)=
module.

** The type hierarchy

Being a bastard child of Java, GRASP is organized based on the notions
of the object-oriented programming. Although inheritance is used
very scarcely in the code base, an extensive use is made of
interface aggregation, which also leads to a hierarchy.

The elementary interfaces implemented by the basic types in GRASP
can be found in the =(editor interfaces elements)= module.
And the most fundamental of those interfaces is =Element=, which
is implemented by all the types listed in the previous section.

It provides functions for drawing, selecting using the mouse/finger
presses, and a way of navigating through using the arrow keys
(the =Indexable= sub-interface).

Another important intetface is =Tile=, which extends the
=Element= interface with the ability to measure its area.
It's woth to note, that the only type which is an =Element=
but not a =Tile= is =Space=, because spaces are -- by
their nature -- non-rectangular.

Lists can be iterated through using the =traverse=
function. It is a control structure that is shared between
the implementations of a drawing function, a measuring function
and a mouse/finger selecting function (and possibly some others).

Extensions -- or elements implementing the =Enchanted= interface
(as defined in the =(editor types extensions extensions)=
module) -- are =Tiles= that are also =Interactive=
(where the exact meaning of =Interactive= can be determined by
studying the contents of the
=(editor types extensions interactions)= module -- but
in particular, =Interactive= objects can react to mouse/finger
events and to keyboard input.

** The construction of the view

=Enchanted= elements are not the only things in GRASP that are
=Interactive=. Everything that is visible must somehow be
accessible from a singleton object =screen= of type
=Screen=, which is a class defined in the
=(editor input screen)= module.

The =screen= consists primarily of two things: the main
content, accessible by the name =top= (although perhaps
"bottom" would be a better name), and =overlay=, which
might contain pop-up windows and other elements that are meant
to be drawn on top of the main content.

Both the main content and the overlay are =Interactive=,
and also =Drawable=. The drawing is performed starting with
the main content, and then the overlaid elements are performed from
the bottom to the top. Interaction is handled in the reverse order:
first, the top element is handled, and if the handler function returns
true, the process is stopped; otherwise we handle the element below,
and so on, until we reach the screen's main content.

The main content of the screen can either be an =Editor=
or a =Split= (or -- more specifically -- a
=SplitBeside= or a =SplitBelow=) -- but eventually
there must be some =Editor=.

An editor displays a =Document= (which essentially is
a =cons= cell), and -- as its name suggests -- it also
lets the users /edit/ that document.

** Editing

A document in GRASP is essentially a mutable data structure.
All editing operations are intermediated by the history subsystem,
located in the =(editor document history-tracking)= module.

The module serves as a good reference regarding the operations
that can be performed on the document. You may note, that every
operation implements the =Edit= interface, which consists
of two operations: =apply!=, which applies the operation
to a document, and =inverse=, which returns an operation
such that, when applied after the original operation, would undo
the effect of that operation.

For every document, a tree of =Edit= operations
is gathered during the editing process.

A sample editing session can be inspected in the
=test-editor-operations.scm= file.

Some remarks regarding the representation of cursors can be found
in the =(language fundamental)= module.

** The Painter

As mentioned at the beginning, GRASP currently comes with three
clients -- one working in the desktop windowing environment, another
in the terminal, and yet another that can be built and run on Android.
I also hope to provide a client for the browser and for iOS at some point.

Each client implements a fairly thin mapping from its native input
system to the input system of GRASP, as presented above. It also
implements a much thicker mapping between the rendering system
offered by the target, and the interface called =Painter=, which
is used by all the visible components in GRASP. The exact definition
of the =Painter= class can be found in the
=(editor interfaces painting)= module. It may seem fairly
whimsical (consisting of around 80 methods at the moment of writing
this document), but this stems from the fact that it tries to accomodate
for the differences between rendering to both graphical and textual outputs.

Currently the code base of GRASP contains 5 implementations of the
Painter intetface: one for the Android client, one for the AWT clent,
one for terminal client, one for the string output, which is used
mainly for testing (and which shares a lot of code with the terminal
implementation), and one null-object for graceful initialization.

** Document representation

A GRASP document is a plain text file, written in a subset of the
Scheme programming language. It is a subset, because certain syntactic
components of Scheme (such as the vector syntax, or the "syntax"
syntax) aren't yet supported.

** Fiddling with the code

If you import =(utils print)= module from your code,
you can use the =WARN= and =DUMP= macros to
poke the system around.

=WARN= simply displays values of all of its arguments,
followed by the new line. =DUMP= is similar, but will
display values of provided expresions after displaying the expressions
themselves.

If you wrap your code inside =(safely <my-code>)= form,
it will print all the unhandled exceptions caused by your code.

It's worth to run the desktop client from the console, to see
all those messages printed. If you want to debug the terminal client,
it's best to pass ~-p <port-number>~ as a command line argument.
This causes the terminal client to start up a socket server where
all the debug messages go, so that you can run, say,
~nc localhost <port-number>~ to see those messages.

The Android client displays the debug messages to the screen.
